package telegram

import (
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"telegrambot/internal/calendar"
	"telegrambot/internal/chatgpt"
	"telegrambot/internal/finance"
	"telegrambot/internal/linking"
	"telegrambot/internal/meetings"
	"telegrambot/internal/messagestore"
	"telegrambot/internal/messagestore/models"
	"telegrambot/internal/okr"
	"telegrambot/internal/users"
	"telegrambot/pkg/config"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"
)

type Handler struct {
	bot			*tgbotapi.BotAPI
	chatgptService		*chatgpt.ChatGPTService
	calendarService		*calendar.Service
	meetingsService		*meetings.Service
	financeService		*finance.Service
	okrService		*okr.Service
	messageStoreService	*messagestore.Service
	userService		*users.Service
	linkingService		*linking.Service
	cfg			*config.Config
	db			*sqlx.DB
}

func NewHandler(
	cfg *config.Config,
	chatgptService *chatgpt.ChatGPTService,
	calendarService *calendar.Service,
	meetingsService *meetings.Service,
	financeService *finance.Service,
	okrService *okr.Service,
	messageStoreService *messagestore.Service,
	usrService *users.Service,
	lnkService *linking.Service,
	db *sqlx.DB,
) (*Handler, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: %v", err)
	}

	logrus.Infof("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	return &Handler{
		bot:			bot,
		chatgptService:		chatgptService,
		calendarService:	calendarService,
		meetingsService:	meetingsService,
		financeService:		financeService,
		okrService:		okrService,
		messageStoreService:	messageStoreService,
		userService:		usrService,
		linkingService:		lnkService,
		cfg:			cfg,
		db:			db,
	}, nil
}

func (h *Handler) SetupWebhook() error {
	webhookURL := fmt.Sprintf("https://%s:%s/webhook", h.cfg.ServerHost, h.cfg.ServerPort)

	webhookConfig, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –≤–µ–±—Ö—É–∫–∞: %w", err)
	}

	if _, err := h.bot.Request(webhookConfig); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: %v", err)
	}

	return nil
}

func (h *Handler) HandleWebhook(w http.ResponseWriter, r *http.Request) {
	update, err := h.bot.HandleUpdate(r)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
		return
	}

	h.handleUpdate(*update)
}

func (h *Handler) SendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := h.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	return nil
}

func (h *Handler) handleUpdate(update tgbotapi.Update) {
	ctx := context.Background()

	if update.Message == nil {
		return
	}

	err := h.meetingsService.StoreUser(ctx, update.Message.From.ID, update.Message.From.UserName, update.Message.From.FirstName)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	if strings.HasPrefix(update.Message.Text, "/start ") {
		parts := strings.Fields(update.Message.Text)
		if len(parts) == 2 {
			linkToken := parts[1]
			h.handleLinkTokenStart(ctx, update.Message.Chat.ID, update.Message.From.ID, linkToken)
			return
		}
	}

	query := `SELECT role FROM users WHERE id = $1`
	var role string
	err = h.db.GetContext(ctx, &role, query, update.Message.From.ID)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		role = "free"
	}

	if role == "free" {
		h.SendMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
		return
	}

	if update.Message.Voice != nil || update.Message.Audio != nil {
		h.handleAudioMessage(ctx, update)
		return
	}

	if update.Message.Command() == "google_auth" {
		h.handleGoogleAuth(ctx, update)
		return
	}

	if update.Message.Text != "" {
		h.handleTextMessage(ctx, update)
		return
	}
}

func (h *Handler) handleAudioMessage(ctx context.Context, update tgbotapi.Update) {
	var fileID string
	if update.Message.Voice != nil {
		fileID = update.Message.Voice.FileID
	} else if update.Message.Audio != nil {
		fileID = update.Message.Audio.FileID
	}

	fileURL, err := h.bot.GetFileDirectURL(fileID)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL —Ñ–∞–π–ª–∞: %v", err)
		h.SendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
		return
	}

	resp, err := http.Get(fileURL)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: %v", err)
		h.SendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
		return
	}
	defer resp.Body.Close()

	audioData, err := io.ReadAll(resp.Body)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: %v", err)
		h.SendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
		return
	}

	h.SendMessage(update.Message.Chat.ID, "üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Jarvis...")

	userID := fmt.Sprintf("%d", update.Message.From.ID)
	history, err := h.messageStoreService.GetMessageHistory(ctx, userID)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		history = []models.MessageHistoryItem{}
	}

	userIDInt64 := update.Message.From.ID
	response, err := h.chatgptService.ProcessAudioMessage(ctx, userIDInt64, audioData, history)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Jarvis: %v", err)
		h.SendMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
		return
	}

	messageID, err := h.messageStoreService.StoreUserMessage(ctx, userID, "[–ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ]", "telegram")
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	var promptTokens, completionTokens *int
	err = h.messageStoreService.StoreAiResponse(ctx, messageID, response, promptTokens, completionTokens)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: %v", err)
	}

	h.SendMessage(update.Message.Chat.ID, response)
}

func (h *Handler) handleTextMessage(ctx context.Context, update tgbotapi.Update) {

	userID := fmt.Sprintf("%d", update.Message.From.ID)
	messageID, err := h.messageStoreService.StoreUserMessage(ctx, userID, update.Message.Text, "telegram")
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	history, err := h.messageStoreService.GetMessageHistory(ctx, userID)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		history = []models.MessageHistoryItem{}
	}

	userIDInt64 := update.Message.From.ID
	response, err := h.chatgptService.ProcessMessage(ctx, userIDInt64, update.Message.Text, history)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Jarvis: %v", err)
		h.SendMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return
	}

	var promptTokens, completionTokens *int
	err = h.messageStoreService.StoreAiResponse(ctx, messageID, response, promptTokens, completionTokens)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: %v", err)
	}

	h.SendMessage(update.Message.Chat.ID, response)
}

func (h *Handler) handleFunctionCall(ctx context.Context, chatID int64, userID int64, functionCall *chatgpt.FunctionCall) string {

	var response string

	switch functionCall.Name {
	case "create_calendar_event":
		title, _ := functionCall.Arguments["title"].(string)
		description, _ := functionCall.Arguments["description"].(string)
		startTimeStr, _ := functionCall.Arguments["start_time"].(string)
		endTimeStr, _ := functionCall.Arguments["end_time"].(string)

		if startTimeStr != "" {

			t, err := time.Parse("2006-01-02T15:04:05", startTimeStr)
			if err == nil {

				startTimeStr = time.Date(
					t.Year(), t.Month(), t.Day(),
					t.Hour(), t.Minute(), t.Second(), 0,
					time.Local,
				).Format(time.RFC3339)
			}
		}

		if endTimeStr != "" {

			t, err := time.Parse("2006-01-02T15:04:05", endTimeStr)
			if err == nil {

				endTimeStr = time.Date(
					t.Year(), t.Month(), t.Day(),
					t.Hour(), t.Minute(), t.Second(), 0,
					time.Local,
				).Format(time.RFC3339)
			}
		}

		eventID, err := h.calendarService.CreateEvent(ctx, userID, title, description, startTimeStr, endTimeStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"
		} else {
			response = fmt.Sprintf("–°–æ–±—ã—Ç–∏–µ '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ (ID: %s)", title, eventID)
		}

	case "create_meeting":
		title, _ := functionCall.Arguments["title"].(string)
		participantUsername, _ := functionCall.Arguments["participant_username"].(string)
		description, _ := functionCall.Arguments["description"].(string)
		startTime, _ := functionCall.Arguments["start_time"].(string)
		endTime, _ := functionCall.Arguments["end_time"].(string)

		meetingID, err := h.meetingsService.CreateMeeting(ctx, userID, participantUsername, title, description, startTime, endTime)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É"
		} else {
			response = fmt.Sprintf("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É '%s' —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @%s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (ID: %s)", title, participantUsername, meetingID)
		}

	case "add_transaction":
		amount, _ := functionCall.Arguments["amount"].(float64)
		details, _ := functionCall.Arguments["details"].(string)
		category, _ := functionCall.Arguments["category"].(string)

		transactionID, err := h.financeService.AddTransaction(ctx, userID, amount, details, category)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"
		} else {
			transactionType := "–¥–æ—Ö–æ–¥"
			if amount < 0 {
				transactionType = "—Ä–∞—Å—Ö–æ–¥"
				amount = -amount
			}
			response = fmt.Sprintf("–î–æ–±–∞–≤–ª–µ–Ω %s –Ω–∞ —Å—É–º–º—É %.2f (ID: %s)", transactionType, amount, transactionID)
		}

	case "get_financial_summary":
		period, _ := functionCall.Arguments["period"].(string)

		summary, err := h.financeService.GetSummary(ctx, userID, period)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É"
		} else {
			response = fmt.Sprintf("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ %s:\n\n–î–æ—Ö–æ–¥—ã: %.2f\n–†–∞—Å—Ö–æ–¥—ã: %.2f\n–ë–∞–ª–∞–Ω—Å: %.2f",
				translatePeriod(period), summary.Income, summary.Expenses, summary.Balance)

			if len(summary.Categories) > 0 {
				response += "\n\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"
				for category, amount := range summary.Categories {
					response += fmt.Sprintf("\n%s: %.2f", category, amount)
				}
			}
		}

	case "create_objective":
		title, _ := functionCall.Arguments["title"].(string)
		sphere, _ := functionCall.Arguments["sphere"].(string)
		period, _ := functionCall.Arguments["period"].(string)
		deadlineStr, _ := functionCall.Arguments["deadline"].(string)
		keyResultsRaw, _ := functionCall.Arguments["key_results"].([]interface{})

		parsedDeadline, err := time.Parse("2006-01-02", deadlineStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}
		deadline := &parsedDeadline

		var keyResults []okr.KeyResult
		for _, krRaw := range keyResultsRaw {
			kr, ok := krRaw.(map[string]interface{})
			if !ok {
				continue
			}

			title, _ := kr["title"].(string)
			target, _ := kr["target"].(float64)
			unit, _ := kr["unit"].(string)
			krDeadlineStr, _ := kr["deadline"].(string)

			parsedKrDeadline, err := time.Parse("2006-01-02", krDeadlineStr)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
				response = fmt.Sprintf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '%s'", title)
				break
			}
			krDeadline := &parsedKrDeadline

			keyResults = append(keyResults, okr.KeyResult{
				Title:		title,
				Target:		target,
				Unit:		unit,
				Deadline:	krDeadline,
			})
		}

		objectiveID, err := h.okrService.CreateObjective(ctx, userID, title, sphere, period, deadline, keyResults)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏ OKR: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å OKR"
		} else {
			response = fmt.Sprintf("–¶–µ–ª—å '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (ID: %s) —Å %d –∫–ª—é—á–µ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏. –î–µ–¥–ª–∞–π–Ω: %s",
				title, objectiveID, len(keyResults), deadline.Format("02.01.2006"))
		}

	case "create_key_result":
		objectiveID, _ := functionCall.Arguments["objective_id"].(string)
		objectiveDescription, _ := functionCall.Arguments["objective_description"].(string)
		title, _ := functionCall.Arguments["title"].(string)
		target, _ := functionCall.Arguments["target"].(float64)
		unit, _ := functionCall.Arguments["unit"].(string)
		deadlineStr, _ := functionCall.Arguments["deadline"].(string)

		if objectiveID == "" && objectiveDescription != "" {
			objectives, err := h.okrService.FindObjectiveByDescription(ctx, userID, objectiveDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–ª–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(objectives) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID —Ü–µ–ª–∏.", objectiveDescription)
				break
			}

			objectiveID = objectives[0].ID
			logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %s)", objectives[0].Title, objectiveID)
		}

		if objectiveID == "" {
			response = "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ü–µ–ª–∏ –∏–ª–∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		parsedDeadline, err := time.Parse("2006-01-02", deadlineStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}
		deadline := &parsedDeadline

		keyResultID, err := h.okrService.CreateKeyResult(ctx, userID, objectiveID, title, target, unit, deadline)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
		} else {

			objective, err := h.okrService.GetObjectiveDetails(ctx, userID, objectiveID)
			objectiveTitle := objectiveID
			if err == nil {
				objectiveTitle = objective.Objective.Title
			}

			response = fmt.Sprintf("–ö–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç '%s' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ü–µ–ª–∏ '%s'. –î–µ–¥–ª–∞–π–Ω: %s. –¢–∞–∫–∂–µ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏-–∑–∞–¥–∞—á–∏ –∫ —ç—Ç–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å –ø–æ–º–æ—â—å—é —Å–æ–æ–±—â–µ–Ω–∏—è '–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ –∫–ª—é—á–µ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É %s'",
				title, objectiveTitle, parsedDeadline.Format("02.01.2006"), title)
			fmt.Println(keyResultID)
		}

	case "create_task":
		keyResultIDFloat, _ := functionCall.Arguments["key_result_id"].(float64)
		keyResultID := int64(keyResultIDFloat)
		keyResultDescription, _ := functionCall.Arguments["key_result_description"].(string)
		objectiveDescription, _ := functionCall.Arguments["objective_description"].(string)
		title, _ := functionCall.Arguments["title"].(string)
		target, _ := functionCall.Arguments["target"].(float64)
		unit, _ := functionCall.Arguments["unit"].(string)
		deadlineStr, _ := functionCall.Arguments["deadline"].(string)

		if keyResultID == 0 && keyResultDescription != "" {
			keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, keyResultDescription, objectiveDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(keyResults) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", keyResultDescription)
				break
			}

			keyResultID = keyResults[0].ID
			logrus.Infof("–ù–∞–π–¥–µ–Ω –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %d)", keyResults[0].Title, keyResultID)
		}

		if keyResultID == 0 {
			response = "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		parsedDeadline, err := time.Parse("2006-01-02", deadlineStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}
		deadline := &parsedDeadline

		taskID, err := h.okrService.CreateTask(ctx, userID, keyResultID, title, target, unit, deadline)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
		} else {

			keyResultTitle := fmt.Sprintf("ID: %d", keyResultID)

			keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, "", "")
			if err == nil {
				for _, kr := range keyResults {
					if kr.ID == keyResultID {
						keyResultTitle = kr.Title
						break
					}
				}
			}

			response = fmt.Sprintf("–ó–∞–¥–∞—á–∞ '%s' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∫–ª—é—á–µ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É '%s' (ID: %d). –î–µ–¥–ª–∞–π–Ω: %s",
				title, keyResultTitle, taskID, parsedDeadline.Format("02.01.2006"))
		}

	case "add_key_result_progress":
		keyResultIDFloat, _ := functionCall.Arguments["key_result_id"].(float64)
		keyResultID := int64(keyResultIDFloat)
		keyResultDescription, _ := functionCall.Arguments["key_result_description"].(string)
		objectiveDescription, _ := functionCall.Arguments["objective_description"].(string)
		progress, _ := functionCall.Arguments["progress"].(float64)

		if keyResultID == 0 && keyResultDescription != "" {
			keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, keyResultDescription, objectiveDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(keyResults) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", keyResultDescription)
				break
			}

			keyResultID = keyResults[0].ID
			logrus.Infof("–ù–∞–π–¥–µ–Ω –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %d)", keyResults[0].Title, keyResultID)
		}

		if keyResultID == 0 {
			response = "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		exceeded, err := h.okrService.UpdateKeyResultProgress(ctx, userID, keyResultID, progress)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
		} else {

			keyResultTitle := fmt.Sprintf("ID: %d", keyResultID)

			keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, "", "")
			if err == nil {
				for _, kr := range keyResults {
					if kr.ID == keyResultID {
						keyResultTitle = kr.Title
						break
					}
				}
			}

			if exceeded {
				response = fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '%s' –æ–±–Ω–æ–≤–ª–µ–Ω, –∏ –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!", keyResultTitle)
			} else {
				if progress >= 0 {
					response = fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '%s' —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ %.2f", keyResultTitle, progress)
				} else {
					response = fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '%s' —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ %.2f", keyResultTitle, -progress)
				}
			}
		}

	case "add_task_progress":
		taskIDFloat, _ := functionCall.Arguments["task_id"].(float64)
		taskID := int64(taskIDFloat)
		taskDescription, _ := functionCall.Arguments["task_description"].(string)
		keyResultDescription, _ := functionCall.Arguments["key_result_description"].(string)
		progress, _ := functionCall.Arguments["progress"].(float64)

		if taskID == 0 && taskDescription != "" {
			tasks, err := h.okrService.FindTaskByDescription(ctx, userID, taskDescription, keyResultDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(tasks) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏.", taskDescription)
				break
			}

			taskID = tasks[0].ID
			logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %d)", tasks[0].Title, taskID)
		}

		if taskID == 0 {
			response = "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		exceeded, err := h.okrService.UpdateTaskProgress(ctx, userID, taskID, progress)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏"
		} else {

			taskTitle := fmt.Sprintf("ID: %d", taskID)

			tasks, err := h.okrService.FindTaskByDescription(ctx, userID, "", "")
			if err == nil {
				for _, task := range tasks {
					if task.ID == taskID {
						taskTitle = task.Title
						break
					}
				}
			}

			if exceeded {
				response = fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ '%s' –æ–±–Ω–æ–≤–ª–µ–Ω, –∏ –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!", taskTitle)
			} else {
				if progress >= 0 {
					response = fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ '%s' —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ %.2f", taskTitle, progress)
				} else {
					response = fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ '%s' —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ %.2f", taskTitle, -progress)
				}
			}
		}

	case "get_objectives":
		objectives, err := h.okrService.GetObjectives(ctx, userID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π"
			break
		}

		if len(objectives) == 0 {
			response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å!"
			break
		}

		response = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"

		for i, obj := range objectives {

			details, err := h.okrService.GetObjectiveDetails(ctx, userID, obj.ID)
			if err != nil {

				progress, _ := h.okrService.GetObjectiveProgress(ctx, obj.ID)

				response += fmt.Sprintf("%d. %s (–°—Ñ–µ—Ä–∞: %s, –ü–µ—Ä–∏–æ–¥: %s)\n",
					i+1, obj.Title, obj.Sphere, translatePeriod(obj.Period))
				response += fmt.Sprintf("   –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%%\n", progress)

				if obj.Deadline != nil {
					response += fmt.Sprintf("   –î–µ–¥–ª–∞–π–Ω: %s\n", obj.Deadline.Format("02.01.2006"))
				} else {
					response += "   –î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
				}

				response += fmt.Sprintf("   ID: %s\n\n", obj.ID)
				continue
			}

			response += fmt.Sprintf("%d. Objective: %s\n", i+1, details.Objective.Title)
			response += fmt.Sprintf("   –°—Ñ–µ—Ä–∞: %s, –ü–µ—Ä–∏–æ–¥: %s\n", details.Objective.Sphere, translatePeriod(details.Objective.Period))

			if details.Objective.Deadline != nil {
				response += fmt.Sprintf("   –î–µ–¥–ª–∞–π–Ω: %s\n", details.Objective.Deadline.Format("02.01.2006"))
			} else {
				response += "   –î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
			}

			response += fmt.Sprintf("   –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: %.1f%%\n\n", details.Progress)

			for j, kr := range details.KeyResults {
				response += fmt.Sprintf("   ‚Ä¢ Key Result %d: %s\n", j+1, kr.KeyResult.Title)
				response += fmt.Sprintf("     –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f / %.1f %s (%.1f%%)\n",
					kr.KeyResult.Progress, kr.KeyResult.Target, kr.KeyResult.Unit, kr.Progress)

				if len(kr.Tasks) > 0 {
					response += "     –ó–∞–¥–∞—á–∏:\n"
					for k, task := range kr.Tasks {
						response += fmt.Sprintf("     %d. %s (%.1f / %.1f %s)\n",
							k+1, task.Title, task.Progress, task.Target, task.Unit)
					}
				}

				response += "\n"
			}

			response += "\n"
		}

		response += "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ ID —Ü–µ–ª–∏."

	case "get_objective_details":
		objectiveID, _ := functionCall.Arguments["objective_id"].(string)

		details, err := h.okrService.GetObjectiveDetails(ctx, userID, objectiveID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏"
			break
		}

		response = fmt.Sprintf("üéØ Objective: %s\n", details.Objective.Title)
		response += fmt.Sprintf("–°—Ñ–µ—Ä–∞: %s, –ü–µ—Ä–∏–æ–¥: %s\n", details.Objective.Sphere, translatePeriod(details.Objective.Period))

		if details.Objective.Deadline != nil {
			response += fmt.Sprintf("–î–µ–¥–ª–∞–π–Ω: %s\n", details.Objective.Deadline.Format("02.01.2006"))
		} else {
			response += "–î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
		}

		response += fmt.Sprintf("–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: %.1f%%\n\n", details.Progress)

		if len(details.KeyResults) == 0 {
			response += "–£ —ç—Ç–æ–π —Ü–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
		} else {
			response += "üìä –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"

			for i, kr := range details.KeyResults {
				response += fmt.Sprintf("%d. Key Result: %s\n", i+1, kr.KeyResult.Title)
				response += fmt.Sprintf("   –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f / %.1f %s (%.1f%%)\n",
					kr.KeyResult.Progress, kr.KeyResult.Target, kr.KeyResult.Unit, kr.Progress)

				if kr.KeyResult.Deadline != nil {
					response += fmt.Sprintf("   –î–µ–¥–ª–∞–π–Ω: %s\n", kr.KeyResult.Deadline.Format("02.01.2006"))
				} else {
					response += "   –î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
				}

				response += fmt.Sprintf("   ID: %d\n", kr.KeyResult.ID)

				if len(kr.Tasks) > 0 {
					response += "\n   –ó–∞–¥–∞—á–∏:\n"
					for j, task := range kr.Tasks {
						response += fmt.Sprintf("   %d. %s\n", j+1, task.Title)
						response += fmt.Sprintf("      –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f / %.1f %s\n",
							task.Progress, task.Target, task.Unit)

						if task.Deadline != nil {
							response += fmt.Sprintf("      –î–µ–¥–ª–∞–π–Ω: %s\n", task.Deadline.Format("02.01.2006"))
						} else {
							response += "      –î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
						}

						response += fmt.Sprintf("      ID: %d\n", task.ID)
					}
				}

				response += "\n"
			}
		}

		response += "\nID —Ü–µ–ª–∏: " + details.Objective.ID

	case "delete_objective":
		objectiveID, _ := functionCall.Arguments["objective_id"].(string)
		objectiveDescription, _ := functionCall.Arguments["objective_description"].(string)

		var foundObjective *okr.Objective

		if objectiveID == "" && objectiveDescription != "" {
			objectives, err := h.okrService.FindObjectiveByDescription(ctx, userID, objectiveDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–ª–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(objectives) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID —Ü–µ–ª–∏.", objectiveDescription)
				break
			}

			objectiveID = objectives[0].ID
			foundObjective = &objectives[0]
			logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %s)", objectives[0].Title, objectiveID)
		}

		if objectiveID == "" {
			response = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∏–ª–∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		err := h.okrService.DeleteObjective(ctx, userID, objectiveID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å"
		} else {

			if foundObjective != nil {
				response = fmt.Sprintf("–¶–µ–ª—å '%s' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", foundObjective.Title)
			} else {

				response = fmt.Sprintf("–¶–µ–ª—å —Å ID %s –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", objectiveID)
			}
		}

	case "delete_key_result":
		keyResultIDFloat, _ := functionCall.Arguments["key_result_id"].(float64)
		keyResultID := int64(keyResultIDFloat)
		keyResultDescription, _ := functionCall.Arguments["key_result_description"].(string)
		objectiveDescription, _ := functionCall.Arguments["objective_description"].(string)

		var foundKeyResult *okr.KeyResult

		if keyResultID == 0 && keyResultDescription != "" {
			keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, keyResultDescription, objectiveDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(keyResults) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", keyResultDescription)
				break
			}

			keyResultID = keyResults[0].ID
			foundKeyResult = &keyResults[0]
			logrus.Infof("–ù–∞–π–¥–µ–Ω –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %d)", keyResults[0].Title, keyResultID)
		}

		if keyResultID == 0 {
			response = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		err := h.okrService.DeleteKeyResult(ctx, userID, keyResultID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
		} else {

			if foundKeyResult != nil {
				response = fmt.Sprintf("–ö–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç '%s' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", foundKeyResult.Title)
			} else {

				response = fmt.Sprintf("–ö–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å ID %d –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", keyResultID)
			}
		}

	case "delete_task":
		taskIDFloat, _ := functionCall.Arguments["task_id"].(float64)
		taskID := int64(taskIDFloat)
		taskDescription, _ := functionCall.Arguments["task_description"].(string)
		keyResultDescription, _ := functionCall.Arguments["key_result_description"].(string)

		var foundTask *okr.Task

		if taskID == 0 && taskDescription != "" {
			tasks, err := h.okrService.FindTaskByDescription(ctx, userID, taskDescription, keyResultDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(tasks) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏.", taskDescription)
				break
			}

			taskID = tasks[0].ID
			foundTask = &tasks[0]
			logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %d)", tasks[0].Title, taskID)
		}

		if taskID == 0 {
			response = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		err := h.okrService.DeleteTask(ctx, userID, taskID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
		} else {

			if foundTask != nil {
				response = fmt.Sprintf("–ó–∞–¥–∞—á–∞ '%s' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", foundTask.Title)
			} else {

				taskTitle := fmt.Sprintf("—Å ID %d", taskID)
				response = fmt.Sprintf("–ó–∞–¥–∞—á–∞ %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", taskTitle)
			}
		}

	case "get_calendar_events":
		date, _ := functionCall.Arguments["date"].(string)
		startDate, _ := functionCall.Arguments["start_date"].(string)
		endDate, _ := functionCall.Arguments["end_date"].(string)

		var events []calendar.Event
		var err error

		if date != "" {

			parsedDate, parseErr := time.Parse("2006-01-02", date)
			if parseErr != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã: %v", parseErr)
				response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
				break
			}
			events, err = h.calendarService.GetEventsByDate(ctx, userID, parsedDate)
		} else if startDate != "" && endDate != "" {

			parsedStartDate, parseErr := time.Parse("2006-01-02", startDate)
			if parseErr != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã: %v", parseErr)
				response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
				break
			}
			parsedEndDate, parseErr := time.Parse("2006-01-02", endDate)
			if parseErr != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã: %v", parseErr)
				response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
				break
			}

			parsedEndDate = parsedEndDate.Add(24 * time.Hour)
			events, err = h.calendarService.GetEventsByDateRange(ctx, userID, parsedStartDate, parsedEndDate)
		} else {

			today := time.Now()
			events, err = h.calendarService.GetEventsByDate(ctx, userID, today)
		}

		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
			break
		}

		if len(events) == 0 {
			if date != "" {
				response = fmt.Sprintf("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ %s", date)
			} else if startDate != "" && endDate != "" {
				response = fmt.Sprintf("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s", startDate, endDate)
			} else {
				response = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
			}
		} else {
			if date != "" {
				response = fmt.Sprintf("–°–æ–±—ã—Ç–∏—è –Ω–∞ %s:\n\n", date)
			} else if startDate != "" && endDate != "" {
				response = fmt.Sprintf("–°–æ–±—ã—Ç–∏—è –≤ –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s:\n\n", startDate, endDate)
			} else {
				response = "–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
			}

			for _, event := range events {
				response += fmt.Sprintf("üïí %s - %s\n",
					event.StartTime.Format("15:04"),
					event.Title)

				if event.Description != "" {
					response += fmt.Sprintf("   %s\n", event.Description)
				}

				response += fmt.Sprintf("   (ID: %s)\n\n", event.ID)
			}
		}

	case "update_calendar_event":
		eventID, _ := functionCall.Arguments["event_id"].(string)
		title, _ := functionCall.Arguments["title"].(string)
		description, _ := functionCall.Arguments["description"].(string)
		startTime, _ := functionCall.Arguments["start_time"].(string)
		endTime, _ := functionCall.Arguments["end_time"].(string)

		event, err := h.calendarService.GetEventByID(ctx, userID, eventID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			response = "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
			break
		}

		if title == "" {
			title = event.Title
		}
		if description == "" {
			description = event.Description
		}
		if startTime == "" {
			startTime = event.StartTime.Format(time.RFC3339)
		}
		if endTime == "" {
			endTime = event.EndTime.Format(time.RFC3339)
		}

		err = h.calendarService.UpdateEvent(ctx, userID, eventID, title, description, startTime, endTime)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
			break
		}

		response = fmt.Sprintf("–°–æ–±—ã—Ç–∏–µ '%s' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", title)

	case "delete_calendar_event":
		eventID, _ := functionCall.Arguments["event_id"].(string)

		err := h.calendarService.DeleteEvent(ctx, userID, eventID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
			break
		}

		response = "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"

	case "delete_calendar_events_by_date":
		dateStr, _ := functionCall.Arguments["date"].(string)

		date, err := time.Parse("2006-01-02", dateStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}

		endDate := date.Add(24 * time.Hour)
		count, err := h.calendarService.DeleteEventsByDateRange(ctx, userID, date, endDate)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è"
			break
		}

		if count == 0 {
			response = fmt.Sprintf("–ù–∞ %s –Ω–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π", dateStr)
		} else {
			response = fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ %d —Å–æ–±—ã—Ç–∏–π –Ω–∞ %s", count, dateStr)
		}

	case "find_and_update_event":
		eventDescription, _ := functionCall.Arguments["event_description"].(string)
		newTitle, _ := functionCall.Arguments["new_title"].(string)
		newDescription, _ := functionCall.Arguments["new_description"].(string)
		newDate, _ := functionCall.Arguments["new_date"].(string)
		newTime, _ := functionCall.Arguments["new_time"].(string)
		timeShift, ok := functionCall.Arguments["time_shift"].(float64)

		var searchStartDate, searchEndDate time.Time

		dateFound := false

		russianMonths := map[string]int{
			"—è–Ω–≤–∞—Ä—è":	1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
			"–º–∞—è":	5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
			"—Å–µ–Ω—Ç—è–±—Ä—è":	9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
		}

		monthPattern := regexp.MustCompile(`(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)(?:\s+(\d{4}))?`)
		if matches := monthPattern.FindStringSubmatch(eventDescription); len(matches) >= 3 {
			day, _ := strconv.Atoi(matches[1])
			month := russianMonths[matches[2]]
			year := time.Now().Year()
			if len(matches) > 3 && matches[3] != "" {
				year, _ = strconv.Atoi(matches[3])
			}

			searchStartDate = time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.Local)
			searchEndDate = searchStartDate.Add(24 * time.Hour)
			dateFound = true

			logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ: %s", searchStartDate.Format("2006-01-02"))
		}

		datePattern := regexp.MustCompile(`(\d{1,2})[\.\-/](\d{1,2})(?:[\.\-/](\d{2,4}))?`)
		matches := datePattern.FindStringSubmatch(eventDescription)
		if !dateFound && len(matches) >= 3 {
			day, _ := strconv.Atoi(matches[1])
			month, _ := strconv.Atoi(matches[2])
			year := time.Now().Year()
			if len(matches) > 3 && matches[3] != "" {
				year, _ = strconv.Atoi(matches[3])

				if year < 100 {
					year += 2000
				}
			}

			searchStartDate = time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.Local)
			searchEndDate = searchStartDate.Add(24 * time.Hour)
			dateFound = true

			logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ: %s", searchStartDate.Format("2006-01-02"))
		}

		if !dateFound {

			now := time.Now()
			searchStartDate = now.AddDate(0, -1, 0)
			searchEndDate = now.AddDate(0, 1, 0)

			logrus.Info("–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–≤—É—Ö –º–µ—Å—è—Ü–µ–≤")
		}

		events, err := h.calendarService.GetEventsByDateRange(ctx, userID, searchStartDate, searchEndDate)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
			break
		}

		if len(events) == 0 {
			if dateFound {
				response = fmt.Sprintf("–ù–∞ %s —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
					searchStartDate.Format("02.01.2006"))
			} else {
				response = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–∞ –º–µ—Å—è—Ü–∞"
			}
			break
		}

		matchScore := func(event calendar.Event, description string) int {
			descriptionLower := strings.ToLower(description)
			titleLower := strings.ToLower(event.Title)
			descriptionEventLower := strings.ToLower(event.Description)

			score := 0

			titleWords := strings.Fields(titleLower)
			for _, word := range titleWords {
				if len(word) > 3 && strings.Contains(descriptionLower, word) {
					score += 2
				}
			}

			if strings.Contains(titleLower, descriptionLower) || strings.Contains(descriptionLower, titleLower) {
				score += 5
			}

			if strings.Contains(descriptionEventLower, descriptionLower) {
				score += 2
			}

			timePattern := regexp.MustCompile(`\b(\d{1,2})[:\.](\d{2})\b`)
			if matches := timePattern.FindAllStringSubmatch(descriptionLower, -1); len(matches) > 0 {
				for _, match := range matches {
					hours, _ := strconv.Atoi(match[1])
					minutes, _ := strconv.Atoi(match[2])

					if event.StartTime.Hour() == hours && event.StartTime.Minute() == minutes {
						score += 10
						break
					}
				}
			}

			if score > 0 {
				logrus.Infof("–°–æ–±—ã—Ç–∏–µ: %s (%s), –°—á–µ—Ç: %d", event.Title, event.StartTime.Format("15:04"), score)
			}

			return score
		}

		var bestMatch *calendar.Event
		bestScore := 0

		for i, event := range events {
			score := matchScore(event, eventDescription)
			if score > bestScore {
				bestScore = score
				bestMatch = &events[i]
			}
		}

		if bestMatch == nil || bestScore < 3 {
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏."
			break
		}

		title := bestMatch.Title
		if newTitle != "" {
			title = newTitle
		}

		description := bestMatch.Description
		if newDescription != "" {
			description = newDescription
		}

		startTime := bestMatch.StartTime
		endTime := bestMatch.EndTime
		duration := endTime.Sub(startTime)

		if ok && timeShift != 0 {
			shiftDuration := time.Duration(timeShift) * time.Minute
			startTime = startTime.Add(shiftDuration)
			endTime = startTime.Add(duration)
		}

		if newDate != "" {
			date, err := time.Parse("2006-01-02", newDate)
			if err == nil {

				startTime = time.Date(
					date.Year(), date.Month(), date.Day(),
					startTime.Hour(), startTime.Minute(), startTime.Second(), 0,
					startTime.Location())
				endTime = startTime.Add(duration)
			}
		}

		if newTime != "" {
			timePattern := regexp.MustCompile(`^(\d{1,2}):(\d{2})$`)
			if matches := timePattern.FindStringSubmatch(newTime); len(matches) >= 3 {
				hours, _ := strconv.Atoi(matches[1])
				minutes, _ := strconv.Atoi(matches[2])

				startTime = time.Date(
					startTime.Year(), startTime.Month(), startTime.Day(),
					hours, minutes, 0, 0,
					startTime.Location())
				endTime = startTime.Add(duration)
			}
		}

		err = h.calendarService.UpdateEvent(ctx, userID, bestMatch.ID, title, description,
			startTime.Format(time.RFC3339), endTime.Format(time.RFC3339))
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
			break
		}

		response = fmt.Sprintf("–°–æ–±—ã—Ç–∏–µ '%s' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: %s",
			title, startTime.Format("02.01.2006 15:04"))

	case "find_and_delete_event":
		eventDescription, _ := functionCall.Arguments["event_description"].(string)
		dateStr, _ := functionCall.Arguments["date"].(string)

		var searchStartDate, searchEndDate time.Time
		dateFound := false

		if dateStr != "" {

			date, err := time.Parse("2006-01-02", dateStr)
			if err == nil {
				searchStartDate = date
				searchEndDate = date.Add(24 * time.Hour)
				dateFound = true
			}
		}

		if !dateFound {

			russianMonths := map[string]int{
				"—è–Ω–≤–∞—Ä—è":	1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
				"–º–∞—è":	5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
				"—Å–µ–Ω—Ç—è–±—Ä—è":	9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
			}

			monthPattern := regexp.MustCompile(`(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)(?:\s+(\d{4}))?`)
			if matches := monthPattern.FindStringSubmatch(eventDescription); len(matches) >= 3 {
				day, _ := strconv.Atoi(matches[1])
				month := russianMonths[matches[2]]
				year := time.Now().Year()
				if len(matches) > 3 && matches[3] != "" {
					year, _ = strconv.Atoi(matches[3])
				}

				searchStartDate = time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.Local)
				searchEndDate = searchStartDate.Add(24 * time.Hour)
				dateFound = true

				logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ: %s", searchStartDate.Format("2006-01-02"))
			}

			datePattern := regexp.MustCompile(`(\d{1,2})[\.\-/](\d{1,2})(?:[\.\-/](\d{2,4}))?`)
			matches := datePattern.FindStringSubmatch(eventDescription)
			if !dateFound && len(matches) >= 3 {
				day, _ := strconv.Atoi(matches[1])
				month, _ := strconv.Atoi(matches[2])
				year := time.Now().Year()
				if len(matches) > 3 && matches[3] != "" {
					year, _ = strconv.Atoi(matches[3])

					if year < 100 {
						year += 2000
					}
				}

				searchStartDate = time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.Local)
				searchEndDate = searchStartDate.Add(24 * time.Hour)
				dateFound = true

				logrus.Infof("–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ: %s", searchStartDate.Format("2006-01-02"))
			}
		}

		if !dateFound {

			now := time.Now()
			searchStartDate = now.AddDate(0, -1, 0)
			searchEndDate = now.AddDate(0, 1, 0)

			logrus.Info("–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–≤—É—Ö –º–µ—Å—è—Ü–µ–≤")
		}

		events, err := h.calendarService.GetEventsByDateRange(ctx, userID, searchStartDate, searchEndDate)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
			break
		}

		if len(events) == 0 {
			if dateFound {
				response = fmt.Sprintf("–ù–∞ %s —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
					searchStartDate.Format("02.01.2006"))
			} else {
				response = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–∞ –º–µ—Å—è—Ü–∞"
			}
			break
		}

		matchScore := func(event calendar.Event, description string) int {
			descriptionLower := strings.ToLower(description)
			titleLower := strings.ToLower(event.Title)
			descriptionEventLower := strings.ToLower(event.Description)

			score := 0

			titleWords := strings.Fields(titleLower)
			for _, word := range titleWords {
				if len(word) > 3 && strings.Contains(descriptionLower, word) {
					score += 2
				}
			}

			if strings.Contains(titleLower, descriptionLower) || strings.Contains(descriptionLower, titleLower) {
				score += 5
			}

			if strings.Contains(descriptionEventLower, descriptionLower) {
				score += 2
			}

			timePattern := regexp.MustCompile(`\b(\d{1,2})[:\.](\d{2})\b`)
			if matches := timePattern.FindAllStringSubmatch(descriptionLower, -1); len(matches) > 0 {
				for _, match := range matches {
					hours, _ := strconv.Atoi(match[1])
					minutes, _ := strconv.Atoi(match[2])

					if event.StartTime.Hour() == hours && event.StartTime.Minute() == minutes {
						score += 10
						break
					}
				}
			}

			if score > 0 {
				logrus.Infof("–°–æ–±—ã—Ç–∏–µ: %s (%s), –°—á–µ—Ç: %d", event.Title, event.StartTime.Format("15:04"), score)
			}

			return score
		}

		var bestMatch *calendar.Event
		bestScore := 0

		for i, event := range events {
			score := matchScore(event, eventDescription)
			if score > bestScore {
				bestScore = score
				bestMatch = &events[i]
			}
		}

		if bestMatch == nil || bestScore < 3 {
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏."
			break
		}

		err = h.calendarService.DeleteEvent(ctx, userID, bestMatch.ID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
			break
		}

		response = fmt.Sprintf("–°–æ–±—ã—Ç–∏–µ '%s' (%s) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
			bestMatch.Title, bestMatch.StartTime.Format("02.01.2006 15:04"))

	case "get_key_results_by_objective_description":
		description, _ := functionCall.Arguments["objective_description"].(string)

		objectives, err := h.okrService.FindObjectiveByDescription(ctx, userID, description)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–ª–µ–π: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–∏ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
			break
		}

		if len(objectives) == 0 {
			response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–π.", description)
			break
		}

		objective := objectives[0]

		details, err := h.okrService.GetObjectiveDetails(ctx, userID, objective.ID)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ü–µ–ª–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏"
			break
		}

		response = fmt.Sprintf("üéØ Objective: %s\n", details.Objective.Title)
		response += fmt.Sprintf("–°—Ñ–µ—Ä–∞: %s, –ü–µ—Ä–∏–æ–¥: %s\n", details.Objective.Sphere, translatePeriod(details.Objective.Period))

		if details.Objective.Deadline != nil {
			response += fmt.Sprintf("–î–µ–¥–ª–∞–π–Ω: %s\n", details.Objective.Deadline.Format("02.01.2006"))
		} else {
			response += "–î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
		}

		response += fmt.Sprintf("–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: %.1f%%\n\n", details.Progress)

		if len(details.KeyResults) == 0 {
			response += "–£ —ç—Ç–æ–π —Ü–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
		} else {
			response += "üìä –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"

			for i, kr := range details.KeyResults {
				response += fmt.Sprintf("%d. Key Result: %s\n", i+1, kr.KeyResult.Title)
				response += fmt.Sprintf("   –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f / %.1f %s (%.1f%%)\n",
					kr.KeyResult.Progress, kr.KeyResult.Target, kr.KeyResult.Unit, kr.Progress)

				if kr.KeyResult.Deadline != nil {
					response += fmt.Sprintf("   –î–µ–¥–ª–∞–π–Ω: %s\n", kr.KeyResult.Deadline.Format("02.01.2006"))
				} else {
					response += "   –î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
				}

				response += fmt.Sprintf("   ID: %d\n", kr.KeyResult.ID)

				if len(kr.Tasks) > 0 {
					response += "\n   –ó–∞–¥–∞—á–∏:\n"
					for j, task := range kr.Tasks {
						response += fmt.Sprintf("   %d. %s\n", j+1, task.Title)
						response += fmt.Sprintf("      –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f / %.1f %s\n",
							task.Progress, task.Target, task.Unit)

						if task.Deadline != nil {
							response += fmt.Sprintf("      –î–µ–¥–ª–∞–π–Ω: %s\n", task.Deadline.Format("02.01.2006"))
						} else {
							response += "      –î–µ–¥–ª–∞–π–Ω: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
						}

						response += fmt.Sprintf("      ID: %d\n", task.ID)
					}
				}

				response += "\n"
			}
		}

		response += "\nID —Ü–µ–ª–∏: " + details.Objective.ID

	case "create_recurring_tasks":
		keyResultIDFloat, _ := functionCall.Arguments["key_result_id"].(float64)
		keyResultID := int64(keyResultIDFloat)
		keyResultDescription, _ := functionCall.Arguments["key_result_description"].(string)
		objectiveDescription, _ := functionCall.Arguments["objective_description"].(string)
		title, _ := functionCall.Arguments["title"].(string)
		target, _ := functionCall.Arguments["target"].(float64)
		unit, _ := functionCall.Arguments["unit"].(string)
		deadlineStr, _ := functionCall.Arguments["deadline"].(string)

		if keyResultID == 0 && keyResultDescription != "" {
			keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, keyResultDescription, objectiveDescription)
			if err != nil {
				logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %v", err)
				response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"
				break
			}

			if len(keyResults) == 0 {
				response = fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '%s'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", keyResultDescription)
				break
			}

			keyResultID = keyResults[0].ID
			logrus.Infof("–ù–∞–π–¥–µ–Ω –∫–ª—é—á–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: %s (ID: %d)", keyResults[0].Title, keyResultID)
		}

		if keyResultID == 0 {
			response = "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ"
			break
		}

		startDate, err := time.Parse("2006-01-02", deadlineStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}

		endDate, err := time.Parse("2006-01-02", deadlineStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}

		taskIDs, err := h.okrService.CreateRecurringTasks(ctx, userID, keyResultID, title, target, unit, startDate, endDate)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏"
			break
		}

		keyResultTitle := fmt.Sprintf("ID: %d", keyResultID)
		keyResults, err := h.okrService.FindKeyResultByDescription(ctx, userID, "", "")
		if err == nil {
			for _, kr := range keyResults {
				if kr.ID == keyResultID {
					keyResultTitle = kr.Title
					break
				}
			}
		}

		response = fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ %d –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á '%s' —Å —Ü–µ–ª—å—é %.1f %s –≤ –¥–µ–Ω—å –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '%s'. –ü–µ—Ä–∏–æ–¥: —Å %s –ø–æ %s",
			len(taskIDs), title, target, unit, keyResultTitle,
			startDate.Format("02.01.2006"), endDate.Format("02.01.2006"))

	case "create_objective_with_recurring_tasks":
		objectiveTitle, _ := functionCall.Arguments["objective_title"].(string)
		sphere, _ := functionCall.Arguments["sphere"].(string)
		period, _ := functionCall.Arguments["period"].(string)
		deadlineStr, _ := functionCall.Arguments["deadline"].(string)
		keyResultTitle, _ := functionCall.Arguments["key_result_title"].(string)
		keyResultTarget, _ := functionCall.Arguments["key_result_target"].(float64)
		keyResultUnit, _ := functionCall.Arguments["key_result_unit"].(string)
		taskTitle, _ := functionCall.Arguments["task_title"].(string)
		dailyTarget, _ := functionCall.Arguments["daily_target"].(float64)
		taskUnit, _ := functionCall.Arguments["task_unit"].(string)
		startDateStr, _ := functionCall.Arguments["start_date"].(string)
		endDateStr, _ := functionCall.Arguments["end_date"].(string)

		var objectiveDeadline *time.Time
		if deadlineStr != "" {
			deadline, err := time.Parse("2006-01-02", deadlineStr)
			if err == nil {
				objectiveDeadline = &deadline
			}
		}

		startDate, err := time.Parse("2006-01-02", startDateStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}

		endDate, err := time.Parse("2006-01-02", endDateStr)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: %v", err)
			response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."
			break
		}

		var keyResultDeadline *time.Time
		keyResultDeadline = &endDate

		objectiveID, keyResultID, taskIDs, err := h.okrService.CreateObjectiveWithRecurringTasks(
			ctx, userID,
			objectiveTitle, sphere, period, objectiveDeadline,
			keyResultTitle, keyResultTarget, keyResultUnit, keyResultDeadline,
			taskTitle, dailyTarget, taskUnit,
			startDate, endDate,
		)

		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏ —Å –∑–∞–¥–∞—á–∞–º–∏: %v", err)
			response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∑–∞–¥–∞—á–∞–º–∏"
			break
		}

		response = fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª—å '%s' —Å –∫–ª—é—á–µ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º '%s' –∏ %d –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ '%s'.\n\n–ü–µ—Ä–∏–æ–¥: —Å %s –ø–æ %s\n–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: %.1f %s\n\nID —Ü–µ–ª–∏: %s\nID –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %d",
			objectiveTitle, keyResultTitle, len(taskIDs), taskTitle,
			startDate.Format("02.01.2006"), endDate.Format("02.01.2006"),
			dailyTarget, taskUnit, objectiveID, keyResultID)

	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"
	}

	return response
}

func translatePeriod(period string) string {
	switch period {
	case "day":
		return "–¥–µ–Ω—å"
	case "week":
		return "–Ω–µ–¥–µ–ª—é"
	case "month":
		return "–º–µ—Å—è—Ü"
	case "quarter":
		return "–∫–≤–∞—Ä—Ç–∞–ª"
	case "year":
		return "–≥–æ–¥"
	default:
		return period
	}
}

func (h *Handler) HandleGoogleCallback(w http.ResponseWriter, r *http.Request) {
	code := r.URL.Query().Get("code")
	state := r.URL.Query().Get("state")

	userID, err := strconv.ParseInt(state, 10, 64)
	if err != nil {
		http.Error(w, "Invalid state parameter", http.StatusBadRequest)
		return
	}

	err = h.calendarService.HandleGoogleCallback(r.Context(), code, userID)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", http.StatusInternalServerError)
		return
	}

	h.SendMessage(userID, "Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(`
		<html>
			<head><title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞</title></head>
			<body>
				<h1>Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</h1>
				<p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ Telegram –±–æ—Ç—É.</p>
			</body>
		</html>
	`))
}

func (h *Handler) handleGoogleAuth(ctx context.Context, update tgbotapi.Update) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	authURL, err := h.calendarService.GetGoogleAuthURL(userID, "telegram")
	if err != nil {
		h.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Calendar")
		return
	}

	msg := fmt.Sprintf("–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n%s", authURL)
	h.SendMessage(chatID, msg)
}

func (h *Handler) handleLinkTokenStart(ctx context.Context, chatID int64, telegramUserID int64, token string) {
	fmt.Println("handleLinkTokenStart", token)
	webUserID, err := h.linkingService.ValidateAndUseLinkToken(token)
	if err != nil {
		logrus.Warnf("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏ '%s' –¥–ª—è telegram_user_id %d: %v", token, telegramUserID, err)
		var errMsg string
		switch {
		case errors.Is(err, linking.ErrTokenNotFound):
			errMsg = "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ."
		case errors.Is(err, linking.ErrTokenAlreadyUsed):
			errMsg = "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞."
		default:
			errMsg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		}
		h.SendMessage(chatID, errMsg)
		return
	}

	err = h.userService.LinkTelegramAccount(ctx, webUserID, telegramUserID)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ telegram_id %d –∫ web_user_id %d: %v", telegramUserID, webUserID, err)
		var errMsg string
		switch {
		case errors.Is(err, users.ErrTelegramIDAlreadyLinkedToOtherUser):
			errMsg = "–≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é –Ω–∞ —Å–∞–π—Ç–µ."
		case errors.Is(err, users.ErrTelegramIDAlreadyLinkedToThisUser):
			errMsg = "–≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –Ω–∞ —Å–∞–π—Ç–µ."
		case errors.Is(err, users.ErrUserNotFound):
			errMsg = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è, –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞."
		default:
			errMsg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		}
		h.SendMessage(chatID, errMsg)
		return
	}

	webUser, err := h.userService.GetWebUserByID(ctx, webUserID)
	var successMsg string
	if err == nil && webUser != nil {
		successMsg = fmt.Sprintf("–í–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é '%s' –Ω–∞ —Å–∞–π—Ç–µ!", webUser.Login)
	} else {
		successMsg = "–í–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–∞ —Å–∞–π—Ç–µ!"
		if err != nil {
			logrus.Warnf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ web_user %d –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏: %v", webUserID, err)
		}
	}
	h.SendMessage(chatID, successMsg)
	logrus.Infof("Telegram –∞–∫–∫–∞—É–Ω—Ç %d —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ web_user %d (—Ç–æ–∫–µ–Ω: %s)", telegramUserID, webUserID, token)
}

func (h *Handler) GetBotInfo() *tgbotapi.User {
	if h.bot != nil {
		return &h.bot.Self
	}
	return nil
}
