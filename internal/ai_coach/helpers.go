package ai_coach

import (
	"context"
	"fmt"
	"strings"
	"time"
)

func (s *AICoachService) generateProductivityInsights(ctx context.Context, userID int64, personality *PersonalityProfile) ([]AIInsight, error) {
	var insights []AIInsight

	peakHours, err := s.analyzePeakProductivityHours(ctx, userID)
	if err == nil && len(peakHours) > 0 {
		insight := AIInsight{
			UserID:			userID,
			InsightType:		"productivity",
			Category:		"optimization",
			Title:			"–¢–≤–æ–µ –≤—Ä–µ–º—è –ø–∏–∫–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
			Content:		fmt.Sprintf("–¢—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ–Ω –≤ %s. –ü–ª–∞–Ω–∏—Ä—É–π –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!", s.formatHours(peakHours)),
			Priority:		4,
			EffectivenessScore:	0.85,
		}
		insights = append(insights, insight)
	}

	completionRate, err := s.getRecentCompletionRate(ctx, userID)
	if err == nil {
		if completionRate > 0.8 {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"celebration",
				Category:		"achievement",
				Title:			"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
				Content:		fmt.Sprintf("–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.0f%% - —ç—Ç–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ", completionRate*100),
				Priority:		5,
				EffectivenessScore:	0.9,
			}
			insights = append(insights, insight)
		} else if completionRate < 0.3 {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"suggestion",
				Category:		"improvement",
				Title:			"–î–∞–≤–∞–π —É–ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				Content:		"–ó–∞–º–µ—á–∞—é, —á—Ç–æ –º–Ω–æ–≥–∏–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å –∏—Ö –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏.",
				Priority:		4,
				ActionButtonText:	"–ü–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
				EffectivenessScore:	0.7,
			}
			insights = append(insights, insight)
		}
	}

	return insights, nil
}

func (s *AICoachService) generateMotivationInsights(ctx context.Context, userID int64, personality *PersonalityProfile, context map[string]interface{}) ([]AIInsight, error) {
	var insights []AIInsight

	if moodCtx, ok := context["mood"]; ok {
		if moodMap, ok := moodCtx.(map[string]interface{}); ok {
			if motivationLevel, ok := moodMap["motivation_level"].(float64); ok {
				if motivationLevel < 0.4 {
					message := s.personalityEngine.GeneratePersonalizedMessage(personality, "motivation", context)
					insight := AIInsight{
						UserID:			userID,
						InsightType:		"motivation",
						Category:		"support",
						Title:			"–í—Ä–µ–º—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏!",
						Content:		message,
						Priority:		5,
						ActionButtonText:	"–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏",
						EffectivenessScore:	0.8,
					}
					insights = append(insights, insight)
				}
			}
		}
	}

	streakDays, err := s.getCurrentStreak(ctx, userID)
	if err == nil {
		if streakDays >= 7 {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"celebration",
				Category:		"achievement",
				Title:			"–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–µ—Ä–∏—è!",
				Content:		fmt.Sprintf("–¢—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Å–µ—Ä–∏—é —É–∂–µ %d –¥–Ω–µ–π! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üî•", streakDays),
				Priority:		4,
				EffectivenessScore:	0.9,
			}
			insights = append(insights, insight)
		} else if streakDays == 0 {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"motivation",
				Category:		"encouragement",
				Title:			"–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Ä–∏—é!",
				Content:		"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –º–∞–ª–æ–≥–æ –∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é —É—Å–ø–µ—Ö–æ–≤! üí™",
				Priority:		3,
				ActionButtonText:	"–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É",
				EffectivenessScore:	0.75,
			}
			insights = append(insights, insight)
		}
	}

	return insights, nil
}

func (s *AICoachService) generateRiskInsights(ctx context.Context, userID int64) ([]AIInsight, error) {
	var insights []AIInsight

	urgentDeadlines, err := s.getUrgentDeadlines(ctx, userID)
	if err == nil && len(urgentDeadlines) > 0 {
		for _, deadline := range urgentDeadlines {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"warning",
				Category:		"deadline",
				Title:			"–î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!",
				Content:		fmt.Sprintf("–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è '%s' –æ—Å—Ç–∞–ª–æ—Å—å %d –¥–Ω–µ–π. –í—Ä–µ–º—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è! ‚è∞", deadline.Title, deadline.DaysLeft),
				Priority:		5,
				ObjectiveID:		&deadline.ID,
				ActionButtonText:	"–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π",
				EffectivenessScore:	0.85,
			}
			insights = append(insights, insight)
		}
	}

	lowProgressGoals, err := s.getLowProgressGoals(ctx, userID)
	if err == nil && len(lowProgressGoals) > 0 {
		for _, goal := range lowProgressGoals {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"suggestion",
				Category:		"progress",
				Title:			"–¶–µ–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–Ω–∏–º–∞–Ω–∏–∏",
				Content:		fmt.Sprintf("'%s' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∏–∑–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (%.0f%%). –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥?", goal.Title, goal.Progress),
				Priority:		3,
				ObjectiveID:		&goal.ID,
				ActionButtonText:	"–ü–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
				EffectivenessScore:	0.7,
			}
			insights = append(insights, insight)
		}
	}

	return insights, nil
}

func (s *AICoachService) generateCelebrationInsights(ctx context.Context, userID int64, personality *PersonalityProfile) ([]AIInsight, error) {
	var insights []AIInsight

	recentAchievements, err := s.getRecentAchievements(ctx, userID)
	if err == nil && len(recentAchievements) > 0 {
		for _, achievement := range recentAchievements {
			celebrationMsg := s.personalityEngine.GeneratePersonalizedMessage(personality, "celebration", map[string]interface{}{
				"achievement": achievement.Name,
			})

			insight := AIInsight{
				UserID:			userID,
				InsightType:		"celebration",
				Category:		"achievement",
				Title:			fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º: %s!", achievement.Name),
				Content:		celebrationMsg,
				Priority:		4,
				ActionButtonText:	"–í—ã–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
				EffectivenessScore:	0.9,
			}
			insights = append(insights, insight)
		}
	}

	recentCompletions, err := s.getRecentCompletedGoals(ctx, userID)
	if err == nil && len(recentCompletions) > 0 {
		for _, completion := range recentCompletions {
			insight := AIInsight{
				UserID:			userID,
				InsightType:		"celebration",
				Category:		"completion",
				Title:			"–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! üéâ",
				Content:		fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º '%s'! –≠—Ç–æ –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", completion.Title),
				Priority:		5,
				ObjectiveID:		&completion.ID,
				ActionButtonText:	"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–æ–º",
				EffectivenessScore:	1.0,
			}
			insights = append(insights, insight)
		}
	}

	return insights, nil
}

func (s *AICoachService) generatePersonalizedTips(ctx context.Context, userID int64, personality *PersonalityProfile, context map[string]interface{}) ([]AIInsight, error) {
	var insights []AIInsight

	personalityTip := s.generatePersonalityBasedTip(personality)
	if personalityTip != "" {
		insight := AIInsight{
			UserID:			userID,
			InsightType:		"tip",
			Category:		"personal_growth",
			Title:			"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç",
			Content:		personalityTip,
			Priority:		2,
			EffectivenessScore:	0.7,
		}
		insights = append(insights, insight)
	}

	timeBasedTip := s.generateTimeBasedTip(context)
	if timeBasedTip != "" {
		insight := AIInsight{
			UserID:			userID,
			InsightType:		"tip",
			Category:		"productivity",
			Title:			"–°–æ–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
			Content:		timeBasedTip,
			Priority:		2,
			EffectivenessScore:	0.6,
		}
		insights = append(insights, insight)
	}

	return insights, nil
}

func (s *AICoachService) analyzePeakProductivityHours(ctx context.Context, userID int64) ([]int, error) {
	query := `
		SELECT EXTRACT(hour FROM created_at) as hour, COUNT(*) as count
		FROM habit_tracking
		WHERE user_id = $1 AND completed = true AND created_at > NOW() - INTERVAL '14 days'
		GROUP BY EXTRACT(hour FROM created_at)
		ORDER BY count DESC
		LIMIT 3
	`

	rows, err := s.db.QueryContext(ctx, query, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var hours []int
	for rows.Next() {
		var hour int
		var count int
		if err := rows.Scan(&hour, &count); err != nil {
			continue
		}
		hours = append(hours, hour)
	}

	return hours, nil
}

func (s *AICoachService) getRecentCompletionRate(ctx context.Context, userID int64) (float64, error) {
	query := `
		SELECT 
			COUNT(CASE WHEN completed = true THEN 1 END)::float / COUNT(*)::float as completion_rate
		FROM habit_tracking
		WHERE user_id = $1 AND date > CURRENT_DATE - INTERVAL '7 days'
	`

	var rate float64
	err := s.db.GetContext(ctx, &rate, query, userID)
	return rate, err
}

func (s *AICoachService) getCurrentStreak(ctx context.Context, userID int64) (int, error) {
	query := `
		SELECT streak_days
		FROM users
		WHERE id = $1
	`

	var streak int
	err := s.db.GetContext(ctx, &streak, query, userID)
	return streak, err
}

func (s *AICoachService) getUrgentDeadlines(ctx context.Context, userID int64) ([]DeadlineInfo, error) {
	query := `
		SELECT id, title, deadline,
			EXTRACT(DAYS FROM deadline - NOW())::int as days_left,
			COALESCE((SELECT AVG(progress/target*100) FROM key_results WHERE objective_id = o.id), 0) as progress
		FROM objectives o
		WHERE user_id = $1 AND deadline IS NOT NULL 
		AND deadline > NOW() AND deadline < NOW() + INTERVAL '3 days'
		AND status = 'active'
		ORDER BY deadline ASC
	`

	rows, err := s.db.QueryContext(ctx, query, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var deadlines []DeadlineInfo
	for rows.Next() {
		var deadline DeadlineInfo
		err := rows.Scan(&deadline.ID, &deadline.Title, &deadline.Deadline, &deadline.DaysLeft, &deadline.Progress)
		if err != nil {
			continue
		}
		deadlines = append(deadlines, deadline)
	}

	return deadlines, nil
}

func (s *AICoachService) getLowProgressGoals(ctx context.Context, userID int64) ([]struct {
	ID, Title	string
	Progress	float64
}, error) {
	query := `
		SELECT o.id, o.title,
			COALESCE((SELECT AVG(progress/target*100) FROM key_results WHERE objective_id = o.id), 0) as progress
		FROM objectives o
		WHERE o.user_id = $1 AND o.status = 'active'
		AND o.created_at < NOW() - INTERVAL '7 days'
		HAVING COALESCE((SELECT AVG(progress/target*100) FROM key_results WHERE objective_id = o.id), 0) < 20
		ORDER BY progress ASC
		LIMIT 3
	`

	rows, err := s.db.QueryContext(ctx, query, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var goals []struct {
		ID, Title	string
		Progress	float64
	}
	for rows.Next() {
		var goal struct {
			ID, Title	string
			Progress	float64
		}
		err := rows.Scan(&goal.ID, &goal.Title, &goal.Progress)
		if err != nil {
			continue
		}
		goals = append(goals, goal)
	}

	return goals, nil
}

func (s *AICoachService) getRecentCompletedGoals(ctx context.Context, userID int64) ([]struct{ ID, Title string }, error) {
	query := `
		SELECT id, title
		FROM objectives
		WHERE user_id = $1 AND completion_date IS NOT NULL
		AND completion_date > NOW() - INTERVAL '24 hours'
		ORDER BY completion_date DESC
		LIMIT 3
	`

	rows, err := s.db.QueryContext(ctx, query, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var completions []struct{ ID, Title string }
	for rows.Next() {
		var completion struct{ ID, Title string }
		err := rows.Scan(&completion.ID, &completion.Title)
		if err != nil {
			continue
		}
		completions = append(completions, completion)
	}

	return completions, nil
}

func (s *AICoachService) generatePersonalityBasedTip(personality *PersonalityProfile) string {
	switch personality.PersonalityType {
	case "analytical":
		return "–ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –∏–∑–º–µ—Ä–∏–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."
	case "creative":
		return "–ü–æ–ø—Ä–æ–±—É–π –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ü–µ–ª–∏. –°–æ–∑–¥–∞–π mind map –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–≤–µ—Ç–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
	case "social":
		return "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —Ü–µ–ø–ª—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏. –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."
	case "pragmatic":
		return "–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–∏–º—ã—Ö —à–∞–≥–∞—Ö. –†–∞–∑–±–∏–≤–∞–π –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–∞–¥–∞—á–∏."
	default:
		return "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π –∏ –Ω–∞–π–¥–∏ —Ç–æ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è."
	}
}

func (s *AICoachService) generateTimeBasedTip(context map[string]interface{}) string {
	if timeCtx, ok := context["time"]; ok {
		if timeMap, ok := timeCtx.(map[string]interface{}); ok {
			if isMorning, ok := timeMap["is_morning"].(bool); ok && isMorning {
				return "–£—Ç—Ä–æ - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è. –û–ø—Ä–µ–¥–µ–ª–∏ 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
			}
			if isEvening, ok := timeMap["is_evening"].(bool); ok && isEvening {
				return "–í–µ—á–µ—Ä - –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –∑–∞–≤—Ç—Ä–∞."
			}
			if isWeekend, ok := timeMap["is_weekend"].(bool); ok && isWeekend {
				return "–í—ã—Ö–æ–¥–Ω—ã–µ - –≤—Ä–µ–º—è –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏."
			}
		}
	}
	return ""
}

func (s *AICoachService) formatHours(hours []int) string {
	if len(hours) == 0 {
		return "—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã"
	}

	var formatted []string
	for _, hour := range hours {
		formatted = append(formatted, fmt.Sprintf("%d:00", hour))
	}

	if len(formatted) == 1 {
		return formatted[0]
	} else if len(formatted) == 2 {
		return formatted[0] + " –∏ " + formatted[1]
	} else {
		return strings.Join(formatted[:len(formatted)-1], ", ") + " –∏ " + formatted[len(formatted)-1]
	}
}

func (s *AICoachService) getCurrentUserGoals(ctx context.Context, userID int64) ([]interface{}, error) {

	return []interface{}{}, nil
}

func (s *AICoachService) getActiveUserGoals(ctx context.Context, userID int64) ([]interface{}, error) {

	return []interface{}{}, nil
}

func (s *AICoachService) findMissingCategories(currentGoals []interface{}) []string {

	return []string{"–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç", "–õ–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"}
}

func (s *AICoachService) createCategorySuggestion(category string, personality *PersonalityProfile, behaviorPatterns map[string]interface{}) GoalSuggestion {
	return GoalSuggestion{
		Title:			fmt.Sprintf("–¶–µ–ª—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s", category),
		Category:		category,
		Description:		fmt.Sprintf("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ %s", category),
		EstimatedDays:		30,
		DifficultyLevel:	3,
		Priority:		3,
		KeyResults: []KeyResultSuggestion{
			{
				Title:			"–ü–µ—Ä–≤—ã–π —à–∞–≥",
				Target:			1,
				Unit:			"–≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
				DifficultyLevel:	2,
				EstimatedHours:		5,
			},
		},
		Reasoning:		fmt.Sprintf("–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–º–æ–∂–µ—Ç —Ç–≤–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –≤ %s", category),
		MotivationStrategy:	"achievement",
		Tags:			[]string{category, "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"},
	}
}

func (s *AICoachService) suggestGoalImprovements(currentGoals []interface{}, personality *PersonalityProfile, behaviorPatterns map[string]interface{}) []GoalSuggestion {

	return []GoalSuggestion{}
}

func (s *AICoachService) generateSeasonalSuggestions(personality *PersonalityProfile, currentGoals []interface{}) []GoalSuggestion {

	return []GoalSuggestion{}
}

func (s *AICoachService) generateAchievementBasedSuggestions(ctx context.Context, userID int64, personality *PersonalityProfile) ([]GoalSuggestion, error) {

	return []GoalSuggestion{}, nil
}

func (s *AICoachService) analyzeDeadlineRisks(goal interface{}) []RiskAlert {

	return []RiskAlert{}
}

func (s *AICoachService) analyzeProgressRisks(ctx context.Context, goal interface{}) ([]RiskAlert, error) {

	return []RiskAlert{}, nil
}

func (s *AICoachService) analyzeDifficultyRisks(goal interface{}) []RiskAlert {

	return []RiskAlert{}
}

func (s *AICoachService) analyzeMotivationRisks(ctx context.Context, userID int64, goal interface{}) ([]RiskAlert, error) {

	return []RiskAlert{}, nil
}

func (s *AICoachService) convertPredictionsToRisks(predictions []PredictionResult) []RiskAlert {

	return []RiskAlert{}
}

func (s *AICoachService) getCompletionStatistics(ctx context.Context, userID int64) (struct{ Rate, AverageTime float64 }, error) {
	return struct{ Rate, AverageTime float64 }{Rate: 0.7, AverageTime: 25.5}, nil
}

func (s *AICoachService) getWeeklyProductivity(ctx context.Context, userID int64) (map[string]float64, error) {
	return map[string]float64{
		"monday":	0.8, "tuesday": 0.7, "wednesday": 0.9,
		"thursday":	0.6, "friday": 0.5, "saturday": 0.3, "sunday": 0.4,
	}, nil
}

func (s *AICoachService) getCategoryPerformance(ctx context.Context, userID int64) (map[string]float64, error) {
	return map[string]float64{
		"–†–∞–±–æ—Ç–∞":	0.8, "–ó–¥–æ—Ä–æ–≤—å–µ": 0.6, "–†–∞–∑–≤–∏—Ç–∏–µ": 0.7,
	}, nil
}

func (s *AICoachService) getStreakData(ctx context.Context, userID int64) (struct{ CurrentStreak, TotalPoints, Level int }, error) {
	return struct{ CurrentStreak, TotalPoints, Level int }{CurrentStreak: 5, TotalPoints: 1250, Level: 3}, nil
}

func (s *AICoachService) getMotivationTrends(ctx context.Context, userID int64) ([]MotivationPoint, error) {
	return []MotivationPoint{
		{Date: time.Now().AddDate(0, 0, -7), Score: 0.6, Mood: 3},
		{Date: time.Now().AddDate(0, 0, -3), Score: 0.8, Mood: 4},
		{Date: time.Now(), Score: 0.7, Mood: 4},
	}, nil
}

func (s *AICoachService) generateImprovementSuggestions(metrics *ProductivityMetrics) []string {
	var suggestions []string

	if metrics.CompletionRate < 0.5 {
		suggestions = append(suggestions, "–ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏")
	}

	if metrics.StreakDays < 3 {
		suggestions = append(suggestions, "–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
	}

	if len(metrics.PeakProductivityHours) > 0 {
		suggestions = append(suggestions, "–ü–ª–∞–Ω–∏—Ä—É–π –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —á–∞—Å—ã –ø–∏–∫–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
	}

	return suggestions
}

func (s *AICoachService) analyzeAvailableTime(ctx context.Context, userID int64) (float64, error) {

	return 2.0, nil
}

func (s *AICoachService) createOptimalWeeklyPlan(activeGoals []interface{}, personality *PersonalityProfile, availableTime float64) map[string]interface{} {
	return map[string]interface{}{
		"monday":	map[string]interface{}{"focus": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "time": 1.0},
		"tuesday":	map[string]interface{}{"focus": "–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "time": 2.0},
		"wednesday":	map[string]interface{}{"focus": "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "time": 2.0},
		"thursday":	map[string]interface{}{"focus": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á", "time": 1.5},
		"friday":	map[string]interface{}{"focus": "–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤", "time": 1.0},
		"saturday":	map[string]interface{}{"focus": "–õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "time": 1.0},
		"sunday":	map[string]interface{}{"focus": "–û—Ç–¥—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "time": 0.5},
	}
}
